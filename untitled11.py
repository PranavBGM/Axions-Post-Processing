# import os# import imageio# # Path to the directory containing frames# frames_directory = "/Users/pranavbharadwajgangrekalvemanoj/Desktop/Axions_Project/evolution_run_2/npy_frames"# # # Path to save the output GIF# # output_gif_path = "/Users/pranavbharadwajgangrekalvemanoj/Desktop/Axions_Project/evolution_run_2/gifs"# # if not os.path.exists(output_gif_path):# #     os.makedirs(output_gif_path)# # # Get a list of frames in the frames directory# # frames = []# # for filename in sorted(os.listdir(frames_directory), key=lambda x: int(x.split("_")[1].split(".")[0])):# #     if filename.startswith("frame") and filename.endswith(".png"):# #         frame_path = os.path.join(frames_directory, filename)# #         frames.append(imageio.imread(frame_path))# # # Output GIF file path# # output_gif_file = os.path.join(output_gif_path, "norm_output.gif")# # # Create the GIF from frames using imageio# # imageio.mimsave(output_gif_file, frames, duration=0.1)# # print(f"GIF created and saved at: {output_gif_file}")# import numpy as np# # Path to the directory containing frames# # Number of frames# num_frames = 178  # Update this to match the number of frames you have# # Function to calculate total energy from the energy density grid# def calculate_total_energy(energy_density):#     # Assuming energy_density is a 3D NumPy array representing the energy density grid#     # Compute total energy as the sum of all grid points#     total_energy = np.sum(energy_density)#     return total_energy# # Initialize an empty list to store total energies for each frame# total_energies = []# # Iterate through all frames and calculate total energy# for i in range(num_frames):#     # Load energy density grid from the corresponding frame file#     frame_path = os.path.join(frames_directory, f"frame_{i}.npy")#     energy_density = np.load(frame_path)  # Load data as a NumPy array#     # Calculate total energy for the current frame#     total_energy = calculate_total_energy(energy_density)    #     # Append the total energy to the list#     total_energies.append(total_energy)# Plot total energy vs frame or time# import matplotlib.pyplot as plt# plt.figure(figsize=(10, 6))# plt.plot(range(num_frames), total_energies, marker='o', linestyle='-', color='b')# plt.xlabel('Frame or Time')# plt.ylabel('Total Energy')# plt.title('Total Energy vs Frame or Time')# plt.grid(True)# plt.show()# plt.savefig(os.path.join("/Users/pranavbharadwajgangrekalvemanoj/Desktop/Axions_Project/evolution_run_2", "total_energy_evol_run_2_178.png"))import numpy as npimport os# Path to the directory containing input filesinput_directory = "/Users/pranavbharadwajgangrekalvemanoj/Desktop/Axions_Project/evolution_run_2"# Path to the directory where .npy files will be savedoutput_directory = os.path.join(input_directory, "npy_files")if not os.path.exists(output_directory):    os.makedirs(output_directory)# Number of framesnum_frames = 201  # Update this to match the number of frames you have# Iterate through all input files and generate .npy filesfor i in range(num_frames):    input_file_path = os.path.join(input_directory, f"gifData_{i}.txt")    # Load data from the input file    array_1d = np.loadtxt(input_file_path)    # Reshape the 1D array into a 3D array    nx = 300    ny = 300    nz = 100    array_3d = array_1d.reshape(nx, ny, nz)    # Save the reshaped 3D array as a .npy file    output_file_path = os.path.join(output_directory, f"frame_{i}.npy")    np.save(output_file_path, array_3d)    print(f"Frame {i} saved as {output_file_path}")# Now you have .npy files in the output_directory that can be loaded efficiently in your analysis code# import os# import numpy as np# import matplotlib.pyplot as plt# # Enable LaTeX rendering for text# plt.rc('text', usetex=True)# plt.rc('font', family='serif')# # Path to the directory containing frames# frames_directory = "/Users/pranavbharadwajgangrekalvemanoj/Desktop/Axions_Project/evolution_run_2/npy_files"# # Number of frames# num_frames = 178  # Update this to match the number of frames you have# # Function to calculate total energy from the energy density grid# def calculate_total_energy(energy_density):#     # Assuming energy_density is a 3D NumPy array representing the energy density grid#     # Compute total energy as the sum of all grid points#     total_energy = np.sum(energy_density)#     return total_energy# # Initialize an empty list to store total energies for each frame# total_energies = []# # Iterate through all frames and calculate total energy# for i in range(num_frames):#     # Load energy density grid from the corresponding frame file#     frame_path = os.path.join(frames_directory, f"frame_{i}.npy")#     energy_density = np.load(frame_path)  # Load data as a NumPy array#     # Calculate total energy for the current frame#     total_energy = calculate_total_energy(energy_density)    #     # Append the total energy to the list#     total_energies.append(total_energy)# # Plot total energy vs frame or time# plt.figure(figsize=(10, 6))# plt.plot(range(num_frames), total_energies, marker='o', linestyle='-', color='b')# plt.xlabel('Frame or Time', fontsize=16)# plt.ylabel('Total Energy', fontsize=16)# plt.title('Total Energy vs Frame or Time', fontsize=18)# plt.grid(True)# plt.tight_layout()# # Save the plot with LaTeX font# output_path = "/Users/pranavbharadwajgangrekalvemanoj/Desktop/Axions_Project/evolution_run_2/total_energy_evol_run_2_178.pdf"# plt.savefig(output_path)# print(f"Plot saved at: {output_path}")# plt.show()# import numpy as np# import matplotlib.pyplot as plt# from mpl_toolkits.mplot3d import Axes3D  # Import the 3D plotting module# import os# # Path to the directory containing input files# input_directory = "/Users/pranavbharadwajgangrekalvemanoj/Desktop/Axions_Project/evolution_run_5/scp_files_test/"# # Path to the directory where frames will be saved# output_directory = os.path.join(input_directory, "string_pos_plots")# if not os.path.exists(output_directory):#     os.makedirs(output_directory)# # Total number of files# total_files = 30  # Assuming the files are numbered from 0 to 700# # Iterate through all input files and generate frames# for i in range(total_files):#     input_file_path = os.path.join(input_directory, f"small_gifStringPosData_{i}.txt")#     # Attempt to load data from the input file#     try:#         data = np.loadtxt(input_file_path)  # Load data from file#         # Create a 3D scatter plot#         fig = plt.figure()#         ax = fig.add_subplot(111, projection='3d')#         ax.scatter(data[:, 0], data[:, 1], data[:, 2], s=5)#         # Set axis limits#         ax.set_xlim([-3, 3])  # Set limits for X axis#         ax.set_ylim([-80, 80])  # Set limits for Y axis#         ax.set_zlim([-20, 20])  # Set limits for Z axis#         # Customize your 3D plot here#         ax.set_xlabel("X")#         ax.set_ylabel("Y")#         ax.set_zlabel("Z")#         ax.set_title(f"3D Scatter Plot for Input File {i}")#         # Set a different viewing perspective#         ax.view_init(elev=20, azim=30)  # Set the elevation and azimuth angles#         # Save the plot as a frame#         frame_path = os.path.join(output_directory, f"frame_{i}.png")#         plt.savefig(frame_path)#         plt.close()#         print(f"Frame {i} generated: {frame_path}")#     except Exception as e:#         # Handle any exceptions (file not found, empty file, etc.) and continue to the next iteration#         print(f"Error processing file {i}: {str(e)}")#         continueimport osimport imageioimport re# Path to the directory containing framesframes_directory = "/Users/pranavbharadwajgangrekalvemanoj/Desktop/Axions_Project/evolution_run_5/scp_files_test/string_pos_plots"# Get a list of frames in the frames directoryframes = []for filename in sorted(os.listdir(frames_directory), key=lambda x: int(re.search(r'\d+', x).group())):      if filename.startswith("frame") and filename.endswith(".png"):        frame_path = os.path.join(frames_directory, filename)        frames.append(imageio.imread(frame_path))# Now the 'frames' list contains all frames in ascending order: 'frame_0.png', 'frame_1.png', ...gif_directory = "/Users/pranavbharadwajgangrekalvemanoj/Desktop/Axions_Project/evolution_run_5/gifs/"if not os.path.exists(gif_directory):    os.makedirs(gif_directory)output_gif_file = os.path.join(gif_directory, "output_run_5_test.gif")# Create the GIF from frames using imageioimageio.mimsave(output_gif_file, frames, duration=0.1)print(f"GIF created and saved at: {output_gif_file}")